/*
 * Copyright (c) 2017 Linaro Limited
 * Copyright (c) 2018 Intel Corporation
 *
 * SPDX-License-Identifier: Apache-2.0
 */


#include <zephyr/kernel.h>
#include <zephyr/device.h>
#include <zephyr/drivers/spi.h>
#include <TMC2130.h>

#define SPI1_NODE           DT_NODELABEL(spi1)

const struct device *const spi1_dev = DEVICE_DT_GET(SPI1_NODE);
struct spi_config spi_cfg;
TMC2130TypeDef tmc2130;

//function definitions 
void spi_init(void);
void tmc2130_readWriteArray(uint8_t channel, uint8_t *data, size_t length);


void main(void) {
    
    //hardware initialization
    spi_init();
    tmc2130_init(&tmc2130,0,tmc2130.config,tmc2130.registerResetState);

    int tick = 0;
    while (tmc2130.config->state !=CONFIG_READY )
    {
        tmc2130_periodicJob(&tmc2130,tick);
        tick ++;
    }
    tmc2130_reset(&tmc2130);

    
    while (1) {




	}
}

void spi_init(void) {
    const struct gpio_dt_spec cs_spec = GPIO_DT_SPEC_GET_BY_IDX(SPI1_NODE,cs_gpios,0);
    
    struct spi_cs_control ctrl = {
        .gpio = cs_spec,
        .delay = 2,
    };

        spi_cfg.frequency = 5000000;
        spi_cfg.operation = SPI_OP_MODE_MASTER | SPI_TRANSFER_MSB | SPI_WORD_SET(8) | SPI_LINES_SINGLE | SPI_LOCK_ON;
        spi_cfg.cs = &ctrl;


}



void tmc2130_readWriteArray(uint8_t channel, uint8_t *data, size_t length) {
    
    struct spi_buf bufs[] = {
            {
                    .buf = data,
                    .len = length
            },
    };


    struct spi_buf_set tx = {
            .buffers =  bufs,
            .count = 1
    };

    struct spi_buf_set rx = {
            .buffers =  bufs,
            .count = 1
    };
    spi_transceive(spi1_dev, &spi_cfg, &tx, &rx);
    //spi_write(spi1_dev, &spi_cfg, &tx);

}
